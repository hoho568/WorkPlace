/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef monitor_entry_TYPES_H
#define monitor_entry_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace infra { namespace monitor {

typedef struct _ServiceEntry__isset {
  _ServiceEntry__isset() : service_name(false), service_type(false), check_command(false), timeout(false), check_interval(false) {}
  bool service_name;
  bool service_type;
  bool check_command;
  bool timeout;
  bool check_interval;
} _ServiceEntry__isset;

class ServiceEntry {
 public:

  static const char* ascii_fingerprint; // = "71F2AA658040156BE6C19C63DDC1EF32";
  static const uint8_t binary_fingerprint[16]; // = {0x71,0xF2,0xAA,0x65,0x80,0x40,0x15,0x6B,0xE6,0xC1,0x9C,0x63,0xDD,0xC1,0xEF,0x32};

  ServiceEntry() : service_name(""), service_type(""), check_command(""), timeout(0), check_interval(0) {
  }

  virtual ~ServiceEntry() throw() {}

  std::string service_name;
  std::string service_type;
  std::string check_command;
  int32_t timeout;
  int32_t check_interval;

  _ServiceEntry__isset __isset;

  void __set_service_name(const std::string& val) {
    service_name = val;
  }

  void __set_service_type(const std::string& val) {
    service_type = val;
  }

  void __set_check_command(const std::string& val) {
    check_command = val;
  }

  void __set_timeout(const int32_t val) {
    timeout = val;
  }

  void __set_check_interval(const int32_t val) {
    check_interval = val;
  }

  bool operator == (const ServiceEntry & rhs) const
  {
    if (!(service_name == rhs.service_name))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    if (!(check_command == rhs.check_command))
      return false;
    if (!(timeout == rhs.timeout))
      return false;
    if (!(check_interval == rhs.check_interval))
      return false;
    return true;
  }
  bool operator != (const ServiceEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif
