/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef monitor_status_TYPES_H
#define monitor_status_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace infra { namespace monitor {

struct StatusCode {
  enum type {
    OK = 0,
    WARNING = 1,
    CRITICAL = 2,
    UNKNOW = 3
  };
};

extern const std::map<int, const char*> _StatusCode_VALUES_TO_NAMES;

struct CheckType {
  enum type {
    BASIC = 0,
    REMOTE = 1,
    CUSTOM = 2
  };
};

extern const std::map<int, const char*> _CheckType_VALUES_TO_NAMES;

struct RecordStatus {
  enum type {
    NORMAL = 0,
    MAGRATION = 1
  };
};

extern const std::map<int, const char*> _RecordStatus_VALUES_TO_NAMES;

typedef struct _ServiceStatus__isset {
  _ServiceStatus__isset() : service_id(false), host_name(false), service_name(false), status(false), info(false), service_type(false), check_interval(false), last_check_time(false), check_type(false) {}
  bool service_id;
  bool host_name;
  bool service_name;
  bool status;
  bool info;
  bool service_type;
  bool check_interval;
  bool last_check_time;
  bool check_type;
} _ServiceStatus__isset;

class ServiceStatus {
 public:

  static const char* ascii_fingerprint; // = "4B8E98A3ACF7521EA61FC319FC6B852A";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x8E,0x98,0xA3,0xAC,0xF7,0x52,0x1E,0xA6,0x1F,0xC3,0x19,0xFC,0x6B,0x85,0x2A};

  ServiceStatus() : service_id(0), host_name(""), service_name(""), status((StatusCode::type)0), info(""), service_type(""), check_interval(0), last_check_time(0), check_type((CheckType::type)0) {
  }

  virtual ~ServiceStatus() throw() {}

  int64_t service_id;
  std::string host_name;
  std::string service_name;
  StatusCode::type status;
  std::string info;
  std::string service_type;
  int32_t check_interval;
  int64_t last_check_time;
  CheckType::type check_type;

  _ServiceStatus__isset __isset;

  void __set_service_id(const int64_t val) {
    service_id = val;
  }

  void __set_host_name(const std::string& val) {
    host_name = val;
  }

  void __set_service_name(const std::string& val) {
    service_name = val;
  }

  void __set_status(const StatusCode::type val) {
    status = val;
  }

  void __set_info(const std::string& val) {
    info = val;
  }

  void __set_service_type(const std::string& val) {
    service_type = val;
  }

  void __set_check_interval(const int32_t val) {
    check_interval = val;
  }

  void __set_last_check_time(const int64_t val) {
    last_check_time = val;
  }

  void __set_check_type(const CheckType::type val) {
    check_type = val;
    __isset.check_type = true;
  }

  bool operator == (const ServiceStatus & rhs) const
  {
    if (!(service_id == rhs.service_id))
      return false;
    if (!(host_name == rhs.host_name))
      return false;
    if (!(service_name == rhs.service_name))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(info == rhs.info))
      return false;
    if (!(service_type == rhs.service_type))
      return false;
    if (!(check_interval == rhs.check_interval))
      return false;
    if (!(last_check_time == rhs.last_check_time))
      return false;
    if (__isset.check_type != rhs.__isset.check_type)
      return false;
    else if (__isset.check_type && !(check_type == rhs.check_type))
      return false;
    return true;
  }
  bool operator != (const ServiceStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ServiceRecord__isset {
  _ServiceRecord__isset() : service_status(false), status_history(false), record_status(false) {}
  bool service_status;
  bool status_history;
  bool record_status;
} _ServiceRecord__isset;

class ServiceRecord {
 public:

  static const char* ascii_fingerprint; // = "64968C8A4AD32F0432BBA30F2FC8CD34";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x96,0x8C,0x8A,0x4A,0xD3,0x2F,0x04,0x32,0xBB,0xA3,0x0F,0x2F,0xC8,0xCD,0x34};

  ServiceRecord() : record_status((RecordStatus::type)0) {
    record_status = (RecordStatus::type)0;

  }

  virtual ~ServiceRecord() throw() {}

  ServiceStatus service_status;
  std::vector<StatusCode::type>  status_history;
  RecordStatus::type record_status;

  _ServiceRecord__isset __isset;

  void __set_service_status(const ServiceStatus& val) {
    service_status = val;
  }

  void __set_status_history(const std::vector<StatusCode::type> & val) {
    status_history = val;
  }

  void __set_record_status(const RecordStatus::type val) {
    record_status = val;
  }

  bool operator == (const ServiceRecord & rhs) const
  {
    if (!(service_status == rhs.service_status))
      return false;
    if (!(status_history == rhs.status_history))
      return false;
    if (!(record_status == rhs.record_status))
      return false;
    return true;
  }
  bool operator != (const ServiceRecord &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceRecord & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif
