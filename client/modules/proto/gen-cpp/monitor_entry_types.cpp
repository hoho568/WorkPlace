/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "monitor_entry_types.h"

namespace infra { namespace monitor {

const char* ServiceEntry::ascii_fingerprint = "71F2AA658040156BE6C19C63DDC1EF32";
const uint8_t ServiceEntry::binary_fingerprint[16] = {0x71,0xF2,0xAA,0x65,0x80,0x40,0x15,0x6B,0xE6,0xC1,0x9C,0x63,0xDD,0xC1,0xEF,0x32};

uint32_t ServiceEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->service_name);
          this->__isset.service_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->service_type);
          this->__isset.service_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->check_command);
          this->__isset.check_command = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timeout);
          this->__isset.timeout = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->check_interval);
          this->__isset.check_interval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceEntry");
  xfer += oprot->writeFieldBegin("service_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->service_name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("service_type", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->service_type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("check_command", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->check_command);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("timeout", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->timeout);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("check_interval", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->check_interval);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}} // namespace
