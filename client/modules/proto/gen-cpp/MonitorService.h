/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MonitorService_H
#define MonitorService_H

#include <TProcessor.h>
#include "monitor_status_types.h"

namespace infra { namespace monitor {

class MonitorServiceIf {
 public:
  virtual ~MonitorServiceIf() {}
  virtual void GetServiceStatus(ServiceStatus& _return, const std::string& host_name, const std::string& service_name) = 0;
  virtual void GetServiceTypeStatus(std::vector<ServiceStatus> & _return, const std::string& service_type, const int32_t status) = 0;
  virtual void SetServiceStatus(const ServiceStatus& service_status) = 0;
};

class MonitorServiceIfFactory {
 public:
  typedef MonitorServiceIf Handler;

  virtual ~MonitorServiceIfFactory() {}

  virtual MonitorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MonitorServiceIf* /* handler */) = 0;
};

class MonitorServiceIfSingletonFactory : virtual public MonitorServiceIfFactory {
 public:
  MonitorServiceIfSingletonFactory(const boost::shared_ptr<MonitorServiceIf>& iface) : iface_(iface) {}
  virtual ~MonitorServiceIfSingletonFactory() {}

  virtual MonitorServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MonitorServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MonitorServiceIf> iface_;
};

class MonitorServiceNull : virtual public MonitorServiceIf {
 public:
  virtual ~MonitorServiceNull() {}
  void GetServiceStatus(ServiceStatus& /* _return */, const std::string& /* host_name */, const std::string& /* service_name */) {
    return;
  }
  void GetServiceTypeStatus(std::vector<ServiceStatus> & /* _return */, const std::string& /* service_type */, const int32_t /* status */) {
    return;
  }
  void SetServiceStatus(const ServiceStatus& /* service_status */) {
    return;
  }
};

typedef struct _MonitorService_GetServiceStatus_args__isset {
  _MonitorService_GetServiceStatus_args__isset() : host_name(false), service_name(false) {}
  bool host_name;
  bool service_name;
} _MonitorService_GetServiceStatus_args__isset;

class MonitorService_GetServiceStatus_args {
 public:

  MonitorService_GetServiceStatus_args() : host_name(""), service_name("") {
  }

  virtual ~MonitorService_GetServiceStatus_args() throw() {}

  std::string host_name;
  std::string service_name;

  _MonitorService_GetServiceStatus_args__isset __isset;

  void __set_host_name(const std::string& val) {
    host_name = val;
  }

  void __set_service_name(const std::string& val) {
    service_name = val;
  }

  bool operator == (const MonitorService_GetServiceStatus_args & rhs) const
  {
    if (!(host_name == rhs.host_name))
      return false;
    if (!(service_name == rhs.service_name))
      return false;
    return true;
  }
  bool operator != (const MonitorService_GetServiceStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorService_GetServiceStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MonitorService_GetServiceStatus_pargs {
 public:


  virtual ~MonitorService_GetServiceStatus_pargs() throw() {}

  const std::string* host_name;
  const std::string* service_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MonitorService_GetServiceStatus_result__isset {
  _MonitorService_GetServiceStatus_result__isset() : success(false) {}
  bool success;
} _MonitorService_GetServiceStatus_result__isset;

class MonitorService_GetServiceStatus_result {
 public:

  MonitorService_GetServiceStatus_result() {
  }

  virtual ~MonitorService_GetServiceStatus_result() throw() {}

  ServiceStatus success;

  _MonitorService_GetServiceStatus_result__isset __isset;

  void __set_success(const ServiceStatus& val) {
    success = val;
  }

  bool operator == (const MonitorService_GetServiceStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MonitorService_GetServiceStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorService_GetServiceStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MonitorService_GetServiceStatus_presult__isset {
  _MonitorService_GetServiceStatus_presult__isset() : success(false) {}
  bool success;
} _MonitorService_GetServiceStatus_presult__isset;

class MonitorService_GetServiceStatus_presult {
 public:


  virtual ~MonitorService_GetServiceStatus_presult() throw() {}

  ServiceStatus* success;

  _MonitorService_GetServiceStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MonitorService_GetServiceTypeStatus_args__isset {
  _MonitorService_GetServiceTypeStatus_args__isset() : service_type(false), status(false) {}
  bool service_type;
  bool status;
} _MonitorService_GetServiceTypeStatus_args__isset;

class MonitorService_GetServiceTypeStatus_args {
 public:

  MonitorService_GetServiceTypeStatus_args() : service_type(""), status(0) {
  }

  virtual ~MonitorService_GetServiceTypeStatus_args() throw() {}

  std::string service_type;
  int32_t status;

  _MonitorService_GetServiceTypeStatus_args__isset __isset;

  void __set_service_type(const std::string& val) {
    service_type = val;
  }

  void __set_status(const int32_t val) {
    status = val;
  }

  bool operator == (const MonitorService_GetServiceTypeStatus_args & rhs) const
  {
    if (!(service_type == rhs.service_type))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const MonitorService_GetServiceTypeStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorService_GetServiceTypeStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MonitorService_GetServiceTypeStatus_pargs {
 public:


  virtual ~MonitorService_GetServiceTypeStatus_pargs() throw() {}

  const std::string* service_type;
  const int32_t* status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MonitorService_GetServiceTypeStatus_result__isset {
  _MonitorService_GetServiceTypeStatus_result__isset() : success(false) {}
  bool success;
} _MonitorService_GetServiceTypeStatus_result__isset;

class MonitorService_GetServiceTypeStatus_result {
 public:

  MonitorService_GetServiceTypeStatus_result() {
  }

  virtual ~MonitorService_GetServiceTypeStatus_result() throw() {}

  std::vector<ServiceStatus>  success;

  _MonitorService_GetServiceTypeStatus_result__isset __isset;

  void __set_success(const std::vector<ServiceStatus> & val) {
    success = val;
  }

  bool operator == (const MonitorService_GetServiceTypeStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MonitorService_GetServiceTypeStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorService_GetServiceTypeStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MonitorService_GetServiceTypeStatus_presult__isset {
  _MonitorService_GetServiceTypeStatus_presult__isset() : success(false) {}
  bool success;
} _MonitorService_GetServiceTypeStatus_presult__isset;

class MonitorService_GetServiceTypeStatus_presult {
 public:


  virtual ~MonitorService_GetServiceTypeStatus_presult() throw() {}

  std::vector<ServiceStatus> * success;

  _MonitorService_GetServiceTypeStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MonitorService_SetServiceStatus_args__isset {
  _MonitorService_SetServiceStatus_args__isset() : service_status(false) {}
  bool service_status;
} _MonitorService_SetServiceStatus_args__isset;

class MonitorService_SetServiceStatus_args {
 public:

  MonitorService_SetServiceStatus_args() {
  }

  virtual ~MonitorService_SetServiceStatus_args() throw() {}

  ServiceStatus service_status;

  _MonitorService_SetServiceStatus_args__isset __isset;

  void __set_service_status(const ServiceStatus& val) {
    service_status = val;
  }

  bool operator == (const MonitorService_SetServiceStatus_args & rhs) const
  {
    if (!(service_status == rhs.service_status))
      return false;
    return true;
  }
  bool operator != (const MonitorService_SetServiceStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorService_SetServiceStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MonitorService_SetServiceStatus_pargs {
 public:


  virtual ~MonitorService_SetServiceStatus_pargs() throw() {}

  const ServiceStatus* service_status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MonitorService_SetServiceStatus_result {
 public:

  MonitorService_SetServiceStatus_result() {
  }

  virtual ~MonitorService_SetServiceStatus_result() throw() {}


  bool operator == (const MonitorService_SetServiceStatus_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MonitorService_SetServiceStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MonitorService_SetServiceStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MonitorService_SetServiceStatus_presult {
 public:


  virtual ~MonitorService_SetServiceStatus_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MonitorServiceClient : virtual public MonitorServiceIf {
 public:
  MonitorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  MonitorServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetServiceStatus(ServiceStatus& _return, const std::string& host_name, const std::string& service_name);
  void send_GetServiceStatus(const std::string& host_name, const std::string& service_name);
  void recv_GetServiceStatus(ServiceStatus& _return);
  void GetServiceTypeStatus(std::vector<ServiceStatus> & _return, const std::string& service_type, const int32_t status);
  void send_GetServiceTypeStatus(const std::string& service_type, const int32_t status);
  void recv_GetServiceTypeStatus(std::vector<ServiceStatus> & _return);
  void SetServiceStatus(const ServiceStatus& service_status);
  void send_SetServiceStatus(const ServiceStatus& service_status);
  void recv_SetServiceStatus();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MonitorServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<MonitorServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (MonitorServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_GetServiceStatus(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetServiceTypeStatus(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetServiceStatus(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MonitorServiceProcessor(boost::shared_ptr<MonitorServiceIf> iface) :
    iface_(iface) {
    processMap_["GetServiceStatus"] = &MonitorServiceProcessor::process_GetServiceStatus;
    processMap_["GetServiceTypeStatus"] = &MonitorServiceProcessor::process_GetServiceTypeStatus;
    processMap_["SetServiceStatus"] = &MonitorServiceProcessor::process_SetServiceStatus;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~MonitorServiceProcessor() {}
};

class MonitorServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MonitorServiceProcessorFactory(const ::boost::shared_ptr< MonitorServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MonitorServiceIfFactory > handlerFactory_;
};

class MonitorServiceMultiface : virtual public MonitorServiceIf {
 public:
  MonitorServiceMultiface(std::vector<boost::shared_ptr<MonitorServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MonitorServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MonitorServiceIf> > ifaces_;
  MonitorServiceMultiface() {}
  void add(boost::shared_ptr<MonitorServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetServiceStatus(ServiceStatus& _return, const std::string& host_name, const std::string& service_name) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetServiceStatus(_return, host_name, service_name);
        return;
      } else {
        ifaces_[i]->GetServiceStatus(_return, host_name, service_name);
      }
    }
  }

  void GetServiceTypeStatus(std::vector<ServiceStatus> & _return, const std::string& service_type, const int32_t status) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetServiceTypeStatus(_return, service_type, status);
        return;
      } else {
        ifaces_[i]->GetServiceTypeStatus(_return, service_type, status);
      }
    }
  }

  void SetServiceStatus(const ServiceStatus& service_status) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->SetServiceStatus(service_status);
    }
  }

};

}} // namespace

#endif
