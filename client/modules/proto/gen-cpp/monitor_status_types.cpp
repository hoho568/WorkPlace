/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "monitor_status_types.h"

namespace infra { namespace monitor {

int _kStatusCodeValues[] = {
  StatusCode::OK,
  StatusCode::WARNING,
  StatusCode::CRITICAL,
  StatusCode::UNKNOW
};
const char* _kStatusCodeNames[] = {
  "OK",
  "WARNING",
  "CRITICAL",
  "UNKNOW"
};
const std::map<int, const char*> _StatusCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kStatusCodeValues, _kStatusCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCheckTypeValues[] = {
  CheckType::BASIC,
  CheckType::REMOTE,
  CheckType::CUSTOM
};
const char* _kCheckTypeNames[] = {
  "BASIC",
  "REMOTE",
  "CUSTOM"
};
const std::map<int, const char*> _CheckType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kCheckTypeValues, _kCheckTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRecordStatusValues[] = {
  RecordStatus::NORMAL,
  RecordStatus::MAGRATION
};
const char* _kRecordStatusNames[] = {
  "NORMAL",
  "MAGRATION"
};
const std::map<int, const char*> _RecordStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRecordStatusValues, _kRecordStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* ServiceStatus::ascii_fingerprint = "4B8E98A3ACF7521EA61FC319FC6B852A";
const uint8_t ServiceStatus::binary_fingerprint[16] = {0x4B,0x8E,0x98,0xA3,0xAC,0xF7,0x52,0x1E,0xA6,0x1F,0xC3,0x19,0xFC,0x6B,0x85,0x2A};

uint32_t ServiceStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->service_id);
          this->__isset.service_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->host_name);
          this->__isset.host_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->service_name);
          this->__isset.service_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->status = (StatusCode::type)ecast0;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->service_type);
          this->__isset.service_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->check_interval);
          this->__isset.check_interval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->last_check_time);
          this->__isset.last_check_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->check_type = (CheckType::type)ecast1;
          this->__isset.check_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceStatus");
  xfer += oprot->writeFieldBegin("service_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->service_id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("host_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->host_name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("service_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->service_name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->info);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("service_type", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->service_type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("check_interval", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->check_interval);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("last_check_time", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->last_check_time);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.check_type) {
    xfer += oprot->writeFieldBegin("check_type", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32((int32_t)this->check_type);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ServiceRecord::ascii_fingerprint = "64968C8A4AD32F0432BBA30F2FC8CD34";
const uint8_t ServiceRecord::binary_fingerprint[16] = {0x64,0x96,0x8C,0x8A,0x4A,0xD3,0x2F,0x04,0x32,0xBB,0xA3,0x0F,0x2F,0xC8,0xCD,0x34};

uint32_t ServiceRecord::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->service_status.read(iprot);
          this->__isset.service_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->status_history.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            iprot->readListBegin(_etype5, _size2);
            this->status_history.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              int32_t ecast7;
              xfer += iprot->readI32(ecast7);
              this->status_history[_i6] = (StatusCode::type)ecast7;
            }
            iprot->readListEnd();
          }
          this->__isset.status_history = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast8;
          xfer += iprot->readI32(ecast8);
          this->record_status = (RecordStatus::type)ecast8;
          this->__isset.record_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceRecord::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceRecord");
  xfer += oprot->writeFieldBegin("service_status", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->service_status.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("status_history", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->status_history.size()));
    std::vector<StatusCode::type> ::const_iterator _iter9;
    for (_iter9 = this->status_history.begin(); _iter9 != this->status_history.end(); ++_iter9)
    {
      xfer += oprot->writeI32((int32_t)(*_iter9));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("record_status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->record_status);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}} // namespace
